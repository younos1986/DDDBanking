// <auto-generated />
using System;
using Banking.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Banking.Infrastructure.Migrations
{
    [DbContext(typeof(BankingDbContext))]
    partial class BankingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:banking.accountSeq", "'accountSeq', 'banking', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Banking.Domain.Accounts.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:HiLoSequenceName", "accountSeq")
                        .HasAnnotation("SqlServer:HiLoSequenceSchema", "banking")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<int>("AccountStatusId");

                    b.Property<long>("CustomerId");

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Accounts","banking");
                });

            modelBuilder.Entity("Banking.Domain.Accounts.AccountStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("AccountStatus","banking");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Opened"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Locked"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Closed"
                        });
                });

            modelBuilder.Entity("Banking.Domain.Accounts.Credit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Credits","banking");
                });

            modelBuilder.Entity("Banking.Domain.Accounts.Debit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Debits","banking");
                });

            modelBuilder.Entity("Banking.Domain.Customers.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountNumber");

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Customers","banking");
                });

            modelBuilder.Entity("Banking.Domain.IntegrationEvents.IntegrationEventLog", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("EventTypeName")
                        .IsRequired();

                    b.Property<int>("State");

                    b.Property<int>("TimesSent");

                    b.Property<string>("TransactionId");

                    b.HasKey("EventId");

                    b.ToTable("IntegrationEventLogs");
                });

            modelBuilder.Entity("Banking.Domain.Accounts.Account", b =>
                {
                    b.HasOne("Banking.Domain.Accounts.AccountStatus", "AccountStatus")
                        .WithMany()
                        .HasForeignKey("AccountStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Banking.Domain.Customers.Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Banking.Domain.Accounts.Credit", b =>
                {
                    b.HasOne("Banking.Domain.Accounts.Account", "Account")
                        .WithMany("Credits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Banking.Domain.ValueObjects.Amount", "Amount", b1 =>
                        {
                            b1.Property<long>("CreditId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<decimal>("Value");

                            b1.HasKey("CreditId");

                            b1.ToTable("Credits","banking");

                            b1.HasOne("Banking.Domain.Accounts.Credit")
                                .WithOne("Amount")
                                .HasForeignKey("Banking.Domain.ValueObjects.Amount", "CreditId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Banking.Domain.Accounts.Debit", b =>
                {
                    b.HasOne("Banking.Domain.Accounts.Account", "Account")
                        .WithMany("Debits")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Banking.Domain.ValueObjects.Amount", "Amount", b1 =>
                        {
                            b1.Property<long>("DebitId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<decimal>("Value");

                            b1.HasKey("DebitId");

                            b1.ToTable("Debits","banking");

                            b1.HasOne("Banking.Domain.Accounts.Debit")
                                .WithOne("Amount")
                                .HasForeignKey("Banking.Domain.ValueObjects.Amount", "DebitId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
